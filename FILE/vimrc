"--------------------------------------------------------------------------------------------------------------------
" 快捷键
"--------------------------------------------------------------------------------------------------------------------

"F3             打开下划线
"F4	        关闭下划线
"F6             关闭搜索高亮
"F5		Lookupfile
"F7	        MRU
"F8		TlistToggle
"F9		WMToggle

" Ctrl + \ + s :cs find s  查找本 C 符号
" Ctrl + \ + g :cs find g  查找本定义
" Ctrl + \ + c :cs find c  查找调用本函数的函数
" Ctrl + \ + t :cs find t  查找本字符串
" Ctrl + \ + e :cs find e  查找本 egrep 模式
" Ctrl + \ + f :cs find f  查找本文件
" Ctrl + \ + i :cs find i  查找包含本文件的文件
" Ctrl + \ + d :cs find d  查找本函数调用的函数

"--------------------------------------------------------------------------------------------------------------------

nnoremap <silent> <F6> :nohl<CR>
nnoremap <silent> <F12> :set nu<CR>
nnoremap <silent> <F2> :set nonu<CR>
nnoremap <silent> <F3> :set cursorline<CR>
nnoremap <silent> <F4> :set nocursorline<CR>

"set nocompatible							" 去掉兼容性bug，上下左右可以使用

"set list								" 显示制表符
"set listchars=tab:>-,trail:-           				" 将制表符显示为'>---',将行尾空格显示为'-'

"set paste								" 允许粘贴文本

set scrolloff=10							" 光标上下两侧最少保留的屏幕行数

set nu									" 显示行号

set autoread								" 设置自动读取被改变的文件

"set clipboard=unnamed 							" Vim 使用剪贴板寄存器 '*' 来执行所有的抽出、删除、修改和放置操作
"set clipboard+=autoselectplus

"set autowriteall							" 有改动时自动写回文件

"set cursorline								" 高亮光标所在的屏幕行
"set cursorcolumn							" 高亮光标所在屏幕列

"set backup								" 设置自动备份
"set backupext=.bak							" 设置备份文件扩展名
"set patchmode=.orig							" 备份一份原始文件
"set backupdir								" 设置备份文件保存路逕
"set writebackup							" 覆盖文件前建立备份

set fsync								" 文件写回后激活 fsync()

"set textwidth=72							" 自动换行

set tags=tags;
"set autochdir								" 自动设置目录为正在编辑的文件所在的目录

"set expandtab								" 键入 <Tab> 时使用空格

set ignorecase								" 搜索时忽略大小写

"set tabstop=4								" 设置tab键的宽度

set selectmode+=mouse					        	" 使用鼠标时启动选择模式
"set selectmode+=cmd					        	" 使用 v、V 或 CTRL-V 时启动选择模式
"set mouse=a 								" 允许使用鼠标

set nowrapscan								" 找到文件结尾后停止查找

set wildmenu								" 指定的字符所用的补全模式

syntax enable								" 打开语法高亮
syntax on								" 用缺省值覆盖

"set cmdheight=3							" 设置显示消息的行数

set showcmd								" 设置显示未完成命令
set sidescroll=10							" 移动显示不能显示的字符

set infercase								" 插入模式里补全关键字

set sessionoptions+=unix				        	" 使用 Unix 换行格式 (单个 <NL>)，即使在 Windows 或 DOS 上也是如此

":runtime! ftplugin/man.vim
"set fileencodings=ucs-bom,utf-8,cp936 	                                " 打开文件时会根据fileencodings选项来识别文件编码
"set encoding=utf-8                    	                                " Vim的内部使用编码
"set backspace=2							" 设置退格键可用

set linebreak								" 整词换行

set whichwrap=b,s,<,>,[,]					        " 光标从行首和行末时可以跳到另一行去

set helplang=cn								" 首选帮助语言

"set spell								" 打开拼写检查

"set spell								" 打开拼写检查

set writeany								" 写入文件不需 "!" 强制

"--------------------------------------------------------------------------------------------------------------------
" 查找/替换相关的设置
"--------------------------------------------------------------------------------------------------------------------
set hlsearch					                        " 高亮显示搜索结果

set incsearch							        " 输入搜索命令时，显示目前输入的模式的匹配位置

"set gdefault								" 替换时所有的行内匹配都被替换，而不是只有第一个

"--------------------------------------------------------------------------------------------------------------------

"--------------------------------------------------------------------------------------------------------------------
" 状态栏相关的设置
"--------------------------------------------------------------------------------------------------------------------
set statusline=[%F]%y%r%m%*%=[Line:%l/%L,Column:%c][%p%%]

set laststatus=2							" 总是显示状态行

"set ruler								" 在编辑过程中，在右下角显示光标位置的状态行

"--------------------------------------------------------------------------------------------------------------------

"--------------------------------------------------------------------------------------------------------------------
" 编程相关的设置
"--------------------------------------------------------------------------------------------------------------------

"set completeopt=longest,menu				                " 用于插入模式的补全

filetype on								" 打开文件类型的检测

filetype indent on							" 为特定的文件类型载入缩进文件

filetype plugin on

set showmatch								" 当输入一个左括号时会匹配相应的那个右括号
"set matchtime=20							" 显示配对括号的十分之一秒数

"set cindent								" 根据 C 缩进规则应有的缩进距离
"set shiftwidth=8							" 打开自动 C 程序缩进 设置自动缩进

set smarttab								" 插入 <Tab> 时使用 'shiftwidth'
"set autoindent								" 根据上一行决定新行的缩进
"set smartindent							" C 程序智能自动缩进
"set softtabstop							" 编辑时 <Tab> 使用的空格数

"--------------------------------------------------------------------------------------------------------------------

"--------------------------------------------------------------------------------------------------------------------
" Mark as loaded
"--------------------------------------------------------------------------------------------------------------------

let g:vimrc_loaded = 1

if has("autocmd")
au BufReadPost * if line("'\"") > 0 && line("'\"") <= line("$")
\| exe "normal g'\"" | endif
endif

"--------------------------------------------------------------------------------------------------------------------

"--------------------------------------------------------------------------------------------------------------------
" Taglist plugin
"--------------------------------------------------------------------------------------------------------------------

nnoremap <silent> <F8> :TlistToggle<CR>

let Tlist_WinWidth = 45
let Tlist_Max_Tag_Length = 50
let Tlist_Exit_OnlyWindow = 1
let Tlist_File_Fold_Auto_Close = 1
let Tlist_Process_File_Always = 1
let Tlist_Show_One_File = 1

"TlistAddFilesRecursive /my/project/dir *.c

"--------------------------------------------------------------------------------------------------------------------

"--------------------------------------------------------------------------------------------------------------------
" Winmanager plugin
"--------------------------------------------------------------------------------------------------------------------

nmap <silent> <F9> :WMToggle<cr>

let winManagerWindowLayout = 'FileExplorer|BufExplorer|TagList'
let g:winManagerWidth = 45
"let g:AutoOpenWinManager = 1
"let g:persistentBehaviour=0					" 只剩一个窗口时, 退出vim.

"--------------------------------------------------------------------------------------------------------------------

"--------------------------------------------------------------------------------------------------------------------
" MRU plugin
"--------------------------------------------------------------------------------------------------------------------

nnoremap <silent> <F7> :MRU<CR>

"let MRU_Use_Current_Window = 1
"let MRU_Auto_Close = 0

"--------------------------------------------------------------------------------------------------------------------

"--------------------------------------------------------------------------------------------------------------------
" Lookupfile plugin
"--------------------------------------------------------------------------------------------------------------------

if filereadable("filenametags")
        let g:LookupFile_TagExpr = string('./filenametags')
else
        let lookupfile_tag = findfile("filenametags", ".;")
        let g:LookupFile_TagExpr = string(lookupfile_tag)
endif

let g:LookupFile_MinPatLength = 3				  " 最少输入3个字符才开始查找
let g:LookupFile_PreserveLastPattern = 0      			  " 不保存上次查找的字符串
let g:LookupFile_PreservePatternHistory = 1   			  " 保存查找历史
let g:LookupFile_AlwaysAcceptFirst = 1        			  " 回车打开第一个匹配项目
let g:LookupFile_AllowNewFiles = 0            			  " 不允许创建不存在的文件
let g:LookupFile_SortMethod = ""              			  " 关闭对搜索结果的字母排序

"--------------------------------------------------------------------------------------------------------------------

"--------------------------------------------------------------------------------------------------------------------
"生成数据库命令
"--------------------------------------------------------------------------------------------------------------------

"ctags -R .;

"find . -name "*.h" -o -name "*.c" -o -name "*.cc" > cscope.files;

"cscope -bkq -i cscope.files;

"find . -type f -printf "%f\t%p\t1\n" | \sort -f > ./filenametags;

"#!/bin/bash
"
"usage()
"{
"        echo "usage:"       
"        echo -e "\t-a create tags for all"
"        echo -e "\t-c create tags for ctag"
"        echo -e "\t-f create tags for lookupfile"
"        echo -e "\t-s create tags for cscope"
"}
"
"while getopts acfs opt
"do
"        case $opt in
"                a)
"                        ctags -R .
"                        flag1=$?
"                        find . -type f -printf "%f\t%p\t1\n" | \sort -f > ./filenametags
"                        flag2=$?
"                        find . -name "*.h" -o -name "*.c" -o -name "*.cc" > cscope.files
"                        flag3=$?
"                        cscope -bkq -i cscope.files
"                        flag4=$?
"                        if [ $flag1 -eq 0 ] && [ $flag2 -eq 0 ] && [ $flag3 -eq 0 ] && [ $flag4 -eq 0 ]
"                        then
"                                echo "create all file successful"
"                                tmp=0
"                        else
"                                echo "create data failed"
"                                tmp=1
"                        fi
"                        exit $tmp;;
"                c)
"                        ctags -R .
"                        if [ $? -eq 0 ]
"                        then
"                                echo "create tags file successfal"
"                                tmp=0
"                        else
"                                echo "create data failed"
"                                tmp=1
"                        fi
"                        exit $tmp;;
"                f)
"                        find . -type f -printf "%f\t%p\t1\n" | \sort -f > ./filenametags
"                        if [ $? -eq 0 ]
"                        then
"                                echo "create filenametags file successful"
"                                tmp=1
"                        else
"                                echo "create data failed"
"                                tmp=0
"                        fi
"                        exit $tmp;;
"                s)
"                        find . -name "*.h" -o -name "*.c" -o -name "*.cc" > cscope.files
"                        flag1=$?
"                        cscope -bkq -i cscope.files
"                        flag2=$?
"                        if [ $flag1 -eq 0 ] && [ $flag2 -eq 0 ]
"                        then
"                                echo "create cscope.files successful"
"                                tmp=0
"                        else
"                                echo "create data failed"
"                                tmp=1
"                        fi
"                        exit $tmp;;
"                *)
"                        usage
"                        exit 1;;
"        esac
"done

"--------------------------------------------------------------------------------------------------------------------
